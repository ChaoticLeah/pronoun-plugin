/// @ 0.12.4
### {
  name: "Pronouns Plugin V4.4.9"
  version: "4.4.9"
  author: "@ChaosKitsune@woem.men"
  description: "This will try to put the users pronouns in their name on any given post"
  permissions: ["read:account", "write:notifications"]
  config: {
    	pronoun_template: {
			type: "string"
			label: "Pronoun template"
			description: 'Template for pronoun usernames. "%[name]" is replaced with the username.  "%[pronouns]" is replaced with the pronouns. '
			default: "%[name] (%[pronouns])"
		},
        checkFields: {
			type: 'boolean'
			label: 'Check User Fields (makes an extra API call)'
			description: 'If its crashing try disabling this'
			default: true
		},
        notifyForUpdates: {
			type: 'boolean'
			label: 'Notify you when there is an update'
			description: 'Turning this on will attempt to notify you once when there is an update for this plugin'
			default: true
		},
        enable_cache: {
            type: 'boolean',
            label: 'Enable Cache',
            description: 'Turn caching on or off. It should be a bit faster and use less data with this on.',
            default: true
        },
        max_cached_accounts: {
            type: 'number',
            label: 'Max cached accounts',
            description: 'Setting this higher will result in potentially faster load times but will use slightly more storage',
            default: 200
        },
        cache_time: {
            type: 'number',
            label: 'Cache Expiration Time (seconds)',
            description: 'Set how long pronouns should be cached before refreshing. A higher value reduces external requests.',
            default: 86400
        },
        debugExperimentalDescMethod: {
			type: 'boolean'
			label: 'Debug algorithm'
			description: 'Prints debug info related to the algorithm'
			default: false
		},
        debug: {
			type: 'boolean'
			label: 'Debug'
			description: 'If it fails to find find pronouns it will put (unknown) at the end of the name'
			default: false
		},
    }
}
let updateIcon = "https://woem.men/files/eecd004b-499f-4114-8dc4-8dbd1518ff89.webp"
let version = 13
let versionPost = "https://woem.men/notes/9t8r1dy4eemc1u2l"
:: Cache {
    
    //Delete any excess old keys
    @shrink_to_max_keys(obj, max_keys) {
        let new_obj = {}
        let keys = Obj:keys(obj)
        let keys_to_remove = keys.len - max_keys
        for let i, keys.len {
            let k = keys[i]
            if i > keys_to_remove {
                Obj:set(new_obj, k, obj[k])
            }
        }
        return new_obj
    }
    @has(key) {
        var cache = Mk:load("cache")
        if cache == null {
            cache = {}
        } else {
            cache = Json:parse(cache)
        }
        return Obj:has(cache, key)
    }
    @clear() {
        Mk:remove("cache")
    }
    @save_cache(key, value) {
        var cache = Mk:load("cache")
        if cache == null {
            cache = {}
        } else {
            cache = Json:parse(cache)
        }
        Obj:set(cache, key, {
            time: Date:now(),
            value: value,
        })
        if Obj:keys(cache).len > Plugin:config.max_cached_accounts && Obj:keys(cache).len > 0 {
            cache = shrink_to_max_keys(cache, Plugin:config.max_cached_accounts)
        }
        Mk:save("cache", Json:stringify(cache))
    }
    @get_cache(key) {
        var cache = Mk:load("cache")
        if cache == null {
            cache = {}
        } else {
            cache = Json:parse(cache)
        }
        if Obj:has(cache, key) {
            var data = Obj:get(cache, key)
            //Cache for a day
            if Date:now() - data.time < 1000 * Plugin:config.cache_time {
                return data.value
            } else {
                return null
            }
        } else {
            return null
        }
    }
}
:: Updater {
    @check_for_update(update_message_title, update_message, update_icon, versionPost, current_version){
        let post = API:get_post_by_url(versionPost)    
        if post != null {
            let text = post.object.text
            if Json:parsable(text) {
                let latest_version = Json:parse(post.object.text).pronounPluginVersion
                if latest_version > current_version && Mk:load("updateRequested") != latest_version {
                    API:send_notification(update_message, update_message_title, update_icon)
                    Mk:save("updateRequested", latest_version)
                }
            }
        }
    }
}
:: API {
    //write:notifications
    @send_notification(message, header, icon){
        Mk:api("notifications/create", {
            body: message, 
            header: header,
            icon: icon
        }) 
    }
    //read:account
    @get_post_by_url(posturl){
        let post = Mk:api("ap/show", {
            uri: posturl
        })
        
        if Obj:has(post, "type") {
            return post
        }
        return null
    }
}
:: PluralTools {
	@is_post_plural(post) {
		post.incl("$[scale.hm") || post.incl("<small> - posted by ")
	}
	@get_headmates(post) {
		let filtered_post = post.split("$[scale.hm ")
		let headmates = []
		if filtered_post.len > 1 {
        	filtered_post.shift()
			for let i, filtered_post.len {
            	let headmate_name = filtered_post[i].split(']')[0].trim()
				headmates.push(headmate_name)
			}
		}
        if post.incl("<small> - posted by ") {
            headmates.push(post.split("<small> - posted by ")[1].split("</small>")[0].split(Str:lf)[0])
        }
        return headmates
	}
    @get_pronouns_from_cache(headmates, username, host, description) {
        for let i, headmates.len {
            if !Cache:has([username, "#", headmates[i], "@", host].join()) {
                return PronounTools:get_headmates_kv(headmates, description)
            }
        }
        //Now we know we have all the headmates needed
        let kv = {}
        for let i, headmates.len {
            Obj:set(kv, headmates[i], Cache:get_cache([username, "#", headmates[i], "@", host].join()))
        }
        return kv
        
    }
}
:: PronounTools {
    // Some people include pronouns in their username.
    @already_contains_pronouns(name) {
        return PronounTools:find_pronouns_in_desc(name) != ""
    }
    
    @style_pronouns(name, pronouns) {
        var pnouns = pronouns
        let ltr_char = Str:from_codepoint(8237)
        if pnouns == null || pnouns.trim() == "" {
            if Plugin:config.debug {
                pnouns = "Unknown"
            } else {
                return name
            }
        }
                
        return Plugin:config.pronoun_template.replace("%[name]", [name, ltr_char].join()).replace("%[pronouns]", [ltr_char, pnouns].join())
    }
    @check_pronoun_length(word) {
        var slash_count = word.to_unicode_arr().filter(@(v) {
            return v == "/"
        }).len
        return slash_count * 10 > word.len
    }
    @find_pronouns_in_desc(desc) {
        let words_in_desc = split_by_space_and_nl(desc)
        //desc.split(" ")
        if Plugin:config.debugExperimentalDescMethod {
            print(words_in_desc)
        }
        for let i, words_in_desc.len {
            let word = trim_parrens(trim_mfm(words_in_desc[i])).replace(",", "")
            //Make sure there is a / and its not w/ (Cuz thats short for with)
            let is_potential_pronoun = check_pronoun_length(word) && word.incl("/") && (!word.incl(" w/")) && (!word.incl("and/or")) && (!word.incl("or/and")) && (!word.incl(".")) && (!word.incl("http")) && (word.index_of("/") > 1 || word.len == 1)
            if is_potential_pronoun {
                let is_fraction = is_word_fraction(word)
                let is_word_mfm = is_word_mfm(word)
                if (!is_fraction) && (!is_word_mfm) {
                    // That might mean someone spaced it out like she / her vs she/her
                    if (word.len == 1 && i != 0 && i != words_in_desc.len) {
                        return [trim_mfm(words_in_desc[i - 1]), word, trim_mfm(words_in_desc[i + 1])].join("").replace(",", "").replace("\"", "")
                    }
                    return word.trim().replace("\"", "")
                }
            }
            
        }
        return ""
    }
    @find_pronouns_in_fields(fields) {
        // If we can find a field that is "pronouns" prefer that
        for let i, fields.len {
            let name = fields[i].name.lower()
            let value = fields[i].value.lower()
            
            if (name.incl("pronoun") && !value.incl("depends")) {
                // For some reason it wasnt working when added to the end of the last if statement but works here???
                if !value.incl("http") {
                    return value
                }
            }
        }
        // Otherwise fallback to searching
        for let i, fields.len {
            let found_pronouns_value = PronounTools:find_pronouns_in_desc(fields[i].value)
            
            if found_pronouns_value != "" && !found_pronouns_value.incl("http") {
                return found_pronouns_value
            }
            //Cuz some people put pronouns in the name of the field.... (turned off cuz its so uncommon and leads to false positives)
            // let found_pronouns_name = PronounTools:find_pronouns_in_desc(fields[i].name)
            // if found_pronouns_name != "" && !found_pronouns_name.incl("http") {
            //     return found_pronouns_name
            // }
        }
        return null
    }
    @get_desc_starting_from(desc, name) {
        let descHeadmateMentionStart = desc.index_of(name) 
        return desc.slice(descHeadmateMentionStart, desc.len)
    }
    @find_headmate_pronouns_in_desc(headmate, desc) {
        return PronounTools:find_pronouns_in_desc(PronounTools:get_desc_starting_from(desc, headmate))
    }
    @get_headmates_kv(headmates, desc) {
        let kv = {}
        for let i, headmates.len {
            Obj:set(kv, headmates[i], PronounTools:find_headmate_pronouns_in_desc(headmates[i], desc))
        }
        return kv
    }
    
    @insert_headmate_pronouns(post, kv) {
        var keys = Obj:keys(kv)
        for let i, keys.len {
            var key = keys[i]
            var value = kv[key]
            if !PronounTools:already_contains_pronouns(key) {
                post = post.replace(["$[scale.hm ", key, "]"].join(), ["$[scale.hm ", PronounTools:style_pronouns(key, value), "]"].join())
                post = post.replace(["<small> - posted by ", key].join(), ["<small> - posted by ", PronounTools:style_pronouns(key, value)].join())
            }
        }
        return post
    }
    //Checking for pronoun/ or /pronoun in a description
    //For example she/ or /her
    //Used in the old method for finding pronouns
    
}
@contains_any(arr, str){
    for let i, arr.len {
        let found_pronoun = str.incl(arr[i])
        if found_pronoun {
            return true
        }
    }
    return false
}
@is_word_fraction(word){
    return contains_any(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], word)
}
@is_word_mfm(word){
    return contains_any(["<", ">"], word)
}
@trim_mfm(word){
    var trimmed = word.split("]")[0].split("[")
    return trimmed[trimmed.len - 1]
}
@trim_parrens(word){
    var trimmed = word.split(")")[0].split("(")
    return trimmed[trimmed.len - 1]
}
@split_by_space_and_nl(desc) {
    var arr = desc.split(" ")
    var new_arr = []
    for let i, arr.len {
        let split_by_nl = arr[i].split(Str:lf)
        for let j, split_by_nl.len {
            new_arr.push(split_by_nl[j])
        }
    }
    return new_arr
}
@check_note(note) {
    if note.reply != null {
        note.reply = check_note(note.reply)
    }
    if note.user.name == null {
        note.user.name = ""
    }
    //if its a boost its not a plural post
	var is_plural_post = if note.text == null {
        false
    } else {
        PluralTools:is_post_plural(note.text)
    }
	if is_plural_post {
        let headmates = PluralTools:get_headmates(note.text)
        //get_pronouns_from_cache(headmates, note.user.username, note.user.host, note.user.description)
        var kv = PluralTools:get_pronouns_from_cache(headmates, note.user.username, note.user.host, note.user.description)
        // var kv = PronounTools:get_headmates_kv(headmates, note.user.description)
        if Plugin:config.enable_cache {
            let keys = Obj:keys(kv)
            for let i, keys.len {
                if kv[keys[i]].len > 0 {
                    Cache:save_cache([note.user.username, "#", keys[i], "@",note.user.host].join(), kv[keys[i]])
                }
            }
        }
        note.text = PronounTools:insert_headmate_pronouns(note.text, kv)
	} else {
        if PronounTools:already_contains_pronouns(note.user.name) {
            return note
        }
        
        var description = note.user.description
        var pronouns = Cache:get_cache([note.user.username, "@", note.user.host].join())
        if pronouns != null {
            note.user.name = PronounTools:style_pronouns(note.user.name, pronouns)
            return note
        }
        if Plugin:config.checkFields {            
            var userData = null
            if note.user.host == null {
                userData = Mk:api("users/show", { username: note.user.username })
            } else {
                userData = Mk:api("users/show", { username: note.user.username, host: note.user.host })
            }
            //Just in-case. Not sure if its needed, but it doesnt hurt
            if description == null {
                description = userData.description
            }
            let pnouns = PronounTools:find_pronouns_in_fields(userData.fields)
            
            if pnouns != null {
                pronouns = pnouns 
            }
        }
        if pronouns == null {
            pronouns = PronounTools:find_pronouns_in_desc(description)
        }
        note.user.name = PronounTools:style_pronouns(note.user.name, pronouns)
        if Plugin:config.enable_cache && pronouns != null && pronouns.len > 0 {
            Cache:save_cache([note.user.username, "@", note.user.host].join(), pronouns)
        }
	}
    return note
}
Plugin:register_note_view_interruptor(@(note) {
    note = check_note(note)
    if note.renote != null {
        note.renote = check_note(note.renote)
    }
    return note
})
print("Pronouns In Name Successfully Installed")
if Plugin:config.notifyForUpdates {
    Updater:check_for_update("Pronoun Plugin Update", "Please install the latest version of the plugin here https://github.com/ChaoticLeah/pronoun-plugin", updateIcon, versionPost, version)
}
if !Plugin:config.enable_cache {
    Cache:clear()
}